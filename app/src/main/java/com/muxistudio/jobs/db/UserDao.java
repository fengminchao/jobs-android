package com.muxistudio.jobs.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    public UserDao(DaoConfig config) {
        super(config);
    }


    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"MAIL\" TEXT PRIMARY KEY NOT NULL ," + // 0: mail
                "\"PWD\" TEXT," + // 1: pwd
                "\"TOKEN\" TEXT," + // 2: token
                "\"AUTH_CODE\" INTEGER);"); // 3: authCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();

        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(1, mail);
        }

        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(2, pwd);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }

        Integer authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindLong(4, authCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(1, mail);
        }

        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(2, pwd);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }

        Integer authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindLong(4, authCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mail
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pwd
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // authCode
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setMail(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPwd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthCode(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
    }

    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getMail();
    }

    @Override
    public String getKey(User entity) {
        if (entity != null) {
            return entity.getMail();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getMail() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mail = new Property(0, String.class, "mail", true, "MAIL");
        public final static Property Pwd = new Property(1, String.class, "pwd", false, "PWD");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property AuthCode = new Property(3, Integer.class, "authCode", false,
                "AUTH_CODE");
    }

}
